03 LVM概念
======================================

3.1 预览
------------------------------------------

.. code-block:: text

    +-- Volume Group --------------------------------+
    |                                                |
    |    +----------------------------------------+	 |
    | PV | PE |  PE | PE | PE | PE | PE | PE | PE |	 |
    |    +----------------------------------------+	 |
    |      .       	  .    	     . 	      .	       	 |
    |      .          .    	     .        .	         |
    |    +----------------------------------------+	 |
    | LV | LE |  LE | LE | LE | LE | LE | LE | LE |	 |
    |    +----------------------------------------+	 |
    |            .          .        .     	   .     |
    |            . 	        .        .     	   .     |
    |    +----------------------------------------+	 |
    | PV | PE |  PE | PE | PE | PE | PE | PE | PE |	 |
    |    +----------------------------------------+	 |
    |                                                |
    +------------------------------------------------+

3.1 卷组 (VG)
------------------------------------------

卷组是LVM中使用的最高级别的抽象。 它将逻辑卷和物理卷集合在一起成为一个管理单元。

3.2 物理卷 (PV)
------------------------------------------

一个物理卷通常是一个硬盘，虽然它可能只是一个看起来像一个硬盘（如软件RAID设备）的设备。

3.3 逻辑卷 (LV)
------------------------------------------

相当于非LVM系统中的磁盘分区。 LV作为标准块设备可见; 因此LV可以包含文件系统（例如/ home）

3.4 物理区块 (PE)
------------------------------------------

每个物理卷都被划分为数据块（称为物理扩展盘区），这些扩展盘区与卷组的逻辑盘区具有相同的大小。

3.5 逻辑区块 (LE)
------------------------------------------

每个逻辑卷都被分割成数据块，称为逻辑盘区。 卷组中的所有逻辑卷的区段大小都是相同的。

3.6 映射模式 (linear/striped)
-------------------------------------------------------------

线性映射 : 将分配一定范围的PE到LV的一个区域，例如LE 1 - 99映射到PV1，LE 100 - 347映射到PV2。

分条映射 : 将跨多个物理卷交织逻辑盘区的块，这个方式一定程度上提高了性能，具体如下

.. code-block:: bash

    1st chunk of LE[1] -> PV1[1], #第一个逻辑块在PV1设备上， 第二个在PV2设备上，等等。
    2nd chunk of LE[1] -> PV2[1],
    3rd chunk of LE[1] -> PV3[1],
    4th chunk of LE[1] -> PV1[2],

3.7 快照
-----------------------------------------------------------------

这是LVM提供的一个非常棒的功能就是快照了，他允许管理员创建一个新的块设备来呈现一个逻辑卷的的精确副本，在某个时间冻结，管理员可以及时备份指定一致状态下的数据，备份完毕就可以删除设备了。

快照最初包含有关快照的一些元数据，但没有来自源逻辑卷的实际数据。快照使用写时复制（copy on write）技术来检测数据在原始数据块中何时更改。它将拍摄快照时保存的值复制到快照卷中的块中，然后允许将新数据存储在源块中。

随着更多块从源逻辑卷上的原始值发生更改，快照大小也会增加。如果快照卷变满，它将被丢弃，所以分配足够的空间是非常重要的，具体取决于你数据的变换情况，如果快照大小和原始数据一样大，它将永远不会溢出的。